digraph {
	Root [label=Root predicate=True schedule="static std::map<uint32_t, uint32_t> last_fin_time = {{1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}}; auto ret = last_fin_time.at(static_cast<uint32_t>(x(\"class\"))); last_fin_time.at(static_cast<uint32_t>(x(\"class\"))) += 1; return ret;" shaping=NULL]
	Left [label=Left predicate="p.class==Left" schedule="static std::map<uint32_t, uint32_t> last_fin_time = {{1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}}; auto ret = last_fin_time.at(static_cast<uint32_t>(x(\"class\"))); last_fin_time.at(static_cast<uint32_t>(x(\"class\"))) += 1; return ret;" shaping=NULL]
	Right [label=Right predicate="p.class==Right" schedule="static std::map<uint32_t, uint32_t> last_fin_time = {{1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}}; auto ret = last_fin_time.at(static_cast<uint32_t>(x(\"class\"))); last_fin_time.at(static_cast<uint32_t>(x(\"class\"))) += 1; return ret;" shaping="static uint32_t last_time=0;
static uint32_t tokens =0;
uint32_t send_time = x(\"time\");
uint32_t r = 1
uint32_t B=1
uint32_t plen = 1
tokens = std::min(tokens +r*(x(\"time\") - last_time),B) ;//r=1, B=1
if (plen<=tokens){ 
	return send_time;
}
else{
	send_time = x(\"time\") + (plen-tokens)/r;
	tokens = tokens -plen;
	last_time = x(\"time\");
	return send_time;
}"]
		Root -> Left
		Root -> Right
}