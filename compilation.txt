std::vector<PIFOArguments> targetLeft={{1,QueueType::PRIORITY_QUEUE,0}};
std::vector<PIFOArguments> targetRight={{1,QueueType::PRIORITY_QUEUE,1}};
PIFOPipelineStage pifo1(1,
"class",
{{1, {Operation::DEQ,targetLeft}},{2, {Operation::DEQ,targetRight}},},
[] (const auto & x) {if (x("ptr")==666){static std::map<uint32_t, uint32_t> last_fin_time = {{1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}}; auto ret = last_fin_time.at(static_cast<uint32_t>(x("class"))); last_fin_time.at(static_cast<uint32_t>(x("class"))) += 1; return ret;}
uint32_t y =0; return y;});
PIFOPipelineStage pifo2(2,
"class",
{{2, {Operation::TRANSMIT, {}}},{1, {Operation::TRANSMIT, {}}},},
[] (const auto & x) {if (x("class")==2){static std::map<uint32_t, uint32_t> last_fin_time = {{1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}}; auto ret = last_fin_time.at(static_cast<uint32_t>(x("class"))); last_fin_time.at(static_cast<uint32_t>(x("class"))) += 1; return ret;}
if (x("class")==1){static std::map<uint32_t, uint32_t> last_fin_time = {{1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}}; auto ret = last_fin_time.at(static_cast<uint32_t>(x("class"))); last_fin_time.at(static_cast<uint32_t>(x("class"))) += 1; return ret;}
uint32_t y =0; return y;});
std::vector<PIFOArguments> StargetRight={{0,QueueType::PRIORITY_QUEUE,0}};
PIFOPipelineStage pifo2S(1,
"class",
{{2, {Operation::ENQ,StargetRight}},},
[] (const auto & x) {if (x("class")==2){static uint32_t last_time=0;
static uint32_t tokens =0;
uint32_t send_time = x("time");
uint32_t r = 1
uint32_t B=1
uint32_t plen = 1
tokens = std::min(tokens +r*(x("time") - last_time),B) ;//r=1, B=1
if (plen<=tokens){ 
	return send_time;
}
else{
	send_time = x("time") + (plen-tokens)/r;
	tokens = tokens -plen;
	last_time = x("time");
	return send_time;
}}uint32_t y =0; return y;});
PIFOPipeline TBF_pipeline({pifo1,pifo2,pifo2S,});
